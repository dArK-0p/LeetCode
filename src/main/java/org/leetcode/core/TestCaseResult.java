package org.leetcode.core;

/**
 * Represents the result of executing a test case on a LeetCode problem.
 * Stores the test input, expected output, actual output, and pass/fail status.
 * <p>
 * Also tracks global test statistics across all instances via static counters.
 *
 * @param <T> the type of the test case input
 * @param <O> the type of the output (both expected and actual)
 */
final class TestCaseResult<T, O> {

    // Static counters for global test statistics
    private static int TOTAL = 0;
    private static int PASSED = 0;
    private static int FAILED = 0;

    private final T input;
    private final O expectedOutput;
    private final O actualOutput;
    private final boolean status;

    /**
     * Constructs a new {@code TestCaseResult} with the given input, expected output,
     * actual output, and test status.
     *
     * @param input          the raw input used in the test case
     * @param expectedOutput the expected result for the given input
     * @param actualOutput   the actual output generated by the solution
     * @param status         {@code true} if the test passed; {@code false} otherwise
     */
    public TestCaseResult(T input, O expectedOutput, O actualOutput, boolean status) {
        this.input = input;
        this.expectedOutput = expectedOutput;
        this.actualOutput = actualOutput;
        this.status = status;

        // Update statistics
        TOTAL++;
        if (status) PASSED++; else FAILED++;
    }

    /// @return the input used in the test case
    public T getInput() {
        return input;
    }

    /// @return the expected output for the test case
    public O getExpectedOutput() {
        return expectedOutput;
    }

    /// @return the actual output produced by the solution
    public O getActualOutput() {
        return actualOutput;
    }

    /// @return {@code true} if the test passed; {@code false} otherwise
    public boolean getStatus() {
        return status;
    }

    /// @return the total number of test cases executed so far
    public static int getTotalCount() {
        return TOTAL;
    }

    /// @return the number of test cases that passed
    public static int getPassedCount() {
        return PASSED;
    }

    /// @return the number of test cases that failed
    public static int getFailedCount() {
        return FAILED;
    }

    /**
     * Returns a formatted string representation of the test case result,
     * showing input, expected output, actual output, and pass/fail status.
     *
     * @return a readable formatted string
     */
    @Override
    public String toString() {
        return String.format(
                "Input: %-30s | Expected: %-20s | Actual: %-20s | Status: %s",
                input,
                expectedOutput,
                actualOutput,
                status ? "✅" : "❌"
        );
    }
}
